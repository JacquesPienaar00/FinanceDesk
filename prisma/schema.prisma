// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String?   @unique
  emailVerified    Boolean?
  image            String?
  hashedPassword   String?
  resetToken       String?
  resetTokenExpiry DateTime?
  role             Role      @default(user)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  accounts         Account[]
  pfData           Json?
  tickets          Ticket[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String  @db.ObjectId

  @@unique([provider, providerAccountId])
}

model ContactSubmission {
  id        String   @id @default(cuid()) @map("_id")
  firstName String
  lastName  String
  company   String?
  email     String
  phone     String
  country   String
  message   String
  createdAt DateTime @default(now())
}

model Ticket {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  number    String   @unique
  subject   String
  status    Status   @default(Open)
  messages  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
}

model BotResponse {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  trigger   String
  response  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  user
  admin
}

enum Status {
  Open
  InProgress
  Closed
}
